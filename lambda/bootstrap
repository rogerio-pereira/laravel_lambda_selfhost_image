#!/bin/bash

set -euo pipefail

# Infinite loop to process incoming events
while true; do
  # Create a temporary file to store headers
  HEADERS=$(mktemp)

  # Get the next event (this will block until an event is received)
  EVENT_DATA=$(curl -sS -LD "$HEADERS" "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

  # Extract the request ID from the headers
  REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

  # Parse the path and method from the event data
  PATH=$(echo "$EVENT_DATA" | jq -r '.requestContext.http.path')
#   REQ_METHOD=$(echo "$EVENT_DATA" | jq -r '.requestContext.http.method')

  # Pass the path, method, and full request data to Laravel
#   LARAVEL_RESPONSE=$(php /var/www/html/public/index.php --path="$PATH" --method="$METHOD" "$EVENT_DATA" 2>&1)
# LARAVEL_RESPONSE=$(php /var/www/html/public/index.php "$EVENT_DATA" 2>&1)
# LARAVEL_RESPONSE=$(php -r '$_SERVER["REQUEST_METHOD"] = "'"$REQ_METHOD"'"; $_SERVER["REQUEST_URI"] = "'"$PATH"'"; require "/var/www/html/public/index.php";' 2>&1)
LARAVEL_RESPONSE=$(/usr/bin/php -r '$_SERVER["REQUEST_METHOD"] = "GET"; $_SERVER["REQUEST_URI"] = "'$PATH'"; require "/var/www/html/public/index.php";' 2>&1)

  # Build response to send back to API Gateway
  RESPONSE_JSON=$(cat <<EOF
{
  "statusCode": 200,
  "headers": {
    "Content-Type": "text/html"
  },
  "body": $(echo "$LARAVEL_RESPONSE" | jq -Rs .)
}
EOF
  )

  # Send the response back to Lambda
  curl -sS -X POST "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response" \
    -d "$RESPONSE_JSON"
done
