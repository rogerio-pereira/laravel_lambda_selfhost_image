#!/bin/bash

set -euo pipefail

# Start the Laravel local server in the background and log output
# php /var/www/html/artisan serve --host=0.0.0.0 --port=8000 &> /tmp/server.log &
# Start PHPâ€™s built-in server with the correct document root
php -S 0.0.0.0:8000 -t /var/www/html/public &

# Wait to ensure the server has started
sleep 2
# cat /tmp/server.log # Output the server log for debugging


# Infinite loop to process incoming events
while true; do
  # Create a temporary file to store headers
  HEADERS=$(mktemp)

  # Get the next event (this will block until an event is received)
  EVENT_DATA=$(curl -sS -LD "$HEADERS" "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

  # Extract the request ID from the headers
  REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

  # Parse the path, method, and body from the event data
  REQ_PATH=$(echo "$EVENT_DATA" | jq -r '.requestContext.http.path')
  REQ_METHOD=$(echo "$EVENT_DATA" | jq -r '.requestContext.http.method')
  REQ_BODY=$(echo "$EVENT_DATA" | jq -r '.body')

  echo $REQ_PATH
  echo $REQ_METHOD
  echo $REQ_BODY

  # Decode the body if it's base64-encoded
  IS_BASE64_ENCODED=$(echo "$EVENT_DATA" | jq -r '.isBase64Encoded')
  if [ "$IS_BASE64_ENCODED" == "true" ]; then
    REQ_BODY=$(echo "$REQ_BODY" | base64 --decode)
  fi

  # Set the Content-Type header, if necessary
  CONTENT_TYPE=$(echo "$EVENT_DATA" | jq -r '.headers["content-type"] // "application/json"')

  # Send the request to the local Laravel server using curl
  CURL_RESPONSE=$(curl -sS -X "$REQ_METHOD" "http://localhost:8000$REQ_PATH" \
    -H "Content-Type: $CONTENT_TYPE" \
    -d "$REQ_BODY" \
    -D -)

  # Split headers and body
  RESPONSE_HEADERS=$(echo "$CURL_RESPONSE" | sed -n '/^HTTP\//,$p' | sed '/^\r$/q')
  RESPONSE_BODY=$(echo "$CURL_RESPONSE" | sed -n '/^\r$/,$p' | tail -n +2)

  # Determine status code from the first line of headers
  STATUS_CODE=$(echo "$RESPONSE_HEADERS" | head -n 1 | awk '{print $2}')

  # Build the JSON response for API Gateway
  RESPONSE_JSON=$(cat <<EOF
{
  "statusCode": $STATUS_CODE,
  "headers": {
    "Content-Type": "$CONTENT_TYPE"
  },
  "body": $(echo "$RESPONSE_BODY" | jq -Rs .)
}
EOF
  )

  # Send the response back to Lambda
  curl -sS -X POST "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response" \
    -d "$RESPONSE_JSON"
done
